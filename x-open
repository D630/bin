#!/usr/bin/env bash
#
# Open files or strings in preferred applications.

# TODO(D630): revise

# -- CONFIG.

Open::Init ()
{
        { typeset i=$(</dev/fd/0) ; } <<-'INIT'
typeset -A Mime=(
        [application/pdf]="${use_x}pdf-viewer.sh %s"
        [application/postscript]="${use_x}pdf-viewer.sh %s"
        [application/vnd.rn-realmedia]="${use_x}video-player.sh %s"
        [application/x-bittorrent]='transmission-cli.sh %s'
        [application/x-lha]='aunpack %s'
        [application/x-rar]='aunpack %s'
        [application/x-shockwave-flash]="${use_x}web-browser.sh %s"
        [application/x-ta]='aunpack %s'
        [application/x-tar]='aunpack %s'
        [application/zip]='aunpack %s'
        [audio/*]="${use_x}audio-player.sh %s"
        [image/*]="${use_x}image-viewer.sh %s"
        [image/svg+xml]="${use_x}web-browser.sh %s"
        [image/vnd.djvu]='xdg-open %s'
        [image/x-xcf]='gimp %s'
        [inode/x-empty]="${use_x}file-browser.sh %s"
        [text/html]="${use_x}web-browser.sh %s"
        [text/troff]='man -l %s'
        [video/*]="${use_x}video-player.sh %s"
)

typeset -A Ext=(
        [-]="${use_x}file-browser.sh %s"
        [--]="${use_x}text-editor.sh %s"
        [7z]='aunpack %s'
        [a]='aunpack %s'
        [aac]="${use_x}audio-player.sh %s"
        [abw]='abiword %s'
        [ace]='aunpack %s'
        [alz]='aunpack %s'
        [arc]='aunpack %s'
        [arj]='aunpack %s'
        [asf]="${use_x}audio-player.sh %s"
        [avi]="${use_x}video-player.sh %s"
        [bz2]='aunpack %s'
        [bz]='aunpack %s'
        [cab]='aunpack %s'
        [cpio]='aunpack %s'
        [deb]='aunpack %s'
        [divx]="${use_x}video-player.sh %s"
        [doc]='libreoffice -o %s'
        [docx]='libreoffice -o %s'
        [f4v]="${use_x}video-player.sh %s"
        [gz]='aunpack %s'
        [jar]='aunpack %s'
        [lha]='aunpack %s'
        [lrz]='aunpack %s'
        [lz]='aunpack %s'
        [lzh]='aunpack %s'
        [lzma]='aunpack %s'
        [lzo]='aunpack %s'
        [m2ts]="${use_x}video-player.sh %s"
        [m3u]="${use_x}audio-player.sh %s"
        [mdb]='libreoffice -o %s'
        [mkv]="${use_x}video-player.sh %s"
        [mov]="${use_x}video-player.sh %s"
        [mp3]="${use_x}audio-player.sh %s"
        [mp4]="${use_x}video-player.sh %s"
        [mpeg]='video-player.sh %s"
        [mpg]="${use_x}video-player.sh %s"
        [odb]='libreoffice -o %s'
        [odp]='libreoffice -o %s'
        [ods]='libreoffice -o %s'
        [odt]='libreoffice -o %s'
        [ogg]="${use_x}audio-player.sh %s"
        [ogv]="${use_x}video-player.sh %s"
        [pps]='libreoffice -o %s'
        [ppt]='libreoffice -o %s'
        [pptx]='libreoffice -o %s'
        [qti]="${use_x}video-player.sh %s"
        [qtif]="${use_x}video-player.sh %s"
        [qtvr]="${use_x}video-player.sh %s"
        [ra]="${use_x}audio-player.sh %s"
        [rar]='aunpack %s'
        [rm]="${use_x}video-player.sh %s"
        [rpm]='aunpack %s'
        [rtf]='libreoffice -o %s'
        [rv]="${use_x}video-player.sh %s"
        [rz]='aunpack %s'
        [svg]="${use_x}web-browser.sh %s"
        [swf]="${use_x}web-browser.sh %s"
        [t7z]='aunpack %s'
        [tar]='aunpack %s'
        [tbz2]='aunpack %s'
        [tbz]='aunpack %s'
        [tgz]='aunpack %s'
        [tlz]='aunpack %s'
        [ts]="${use_x}video-player.sh %s"
        [txz]='aunpack %s'
        [tz]='aunpack %s'
        [tzo]='aunpack %s'
        [wav]="${use_x}audio-player.sh %s"
        [webm]="${use_x}video-player.sh %s"
        [wma]="${use_x}audio-player.sh %s"
        [wmf]="${use_x}web-browser.sh %s"
        [wmv]="${use_x}video-player.sh %s"
        [xls]='libreoffice -o %s'
        [xlsx]='libreoffice -o %s'
        [xz]='aunpack %s'
        [z]='aunpack %s'
        [zip]='aunpack %s'
)
INIT
        printf '%s' "$i"

} 2>/dev/null

# -- FUNCTIONS.

Open::CheckMime ()
{
        typeset mime_type=$(file -L -b --mime-type "$1")

        if
                [[ -n ${Mime[$mime_type]} ]]
        then
                command=( ${Mime[$mime_type]} )
        elif
                [[ -n ${Mime[${mime_type%/*}/*]} ]]
        then
                command=( ${Mime[${mime_type%/*}/*]} )
        else
                return 1
        fi
}

Open::CheckExt ()
if
        [[ -n ${1/${1##*.}/} && -n ${Ext[${1##*.}]} ]]
then
        command=( ${Ext[${1##*.}]} )
else
        command=( ${Ext[--]} )
fi

Open::CheckString ()
case $1 in
*://*)
        command=( ${use_x}web-browser.sh %s)
;;
*:*)
        command=( xdg-open %s)
;;
*@*.*)
        command=( ${use_x}mail-viewer.sh %s)
;;
*)
        printf "Could not handle file or string: '%s'\n" "$1" \
        1>&2;
        exit 1
;;
esac

Open::ExecCommand ()
if
        command -v "${command[0]}" \
        1>/dev/null \
        2>&1;
then
        if
                test-tty.sh \
                2>/dev/null;
        then
                case ${flag_f}${flag_n}${flag_k} in
                111)
                        exec daemonize.sh terminal.sh -e "${SHELL:-sh}" -c "${command[0]} ${command_quoted[@]:1};exec ${SHELL:-sh}"
                ;;
                110)
                        exec daemonize.sh terminal.sh -e "${SHELL:-sh}" -c "${command[0]} ${command_quoted[@]:1}"
                ;;
                #101)
                #;;
                100)
                        exec setsid.sh "${command[0]}" "${command[@]}"
                ;;
                011)
                        terminal.sh -e "${SHELL:-sh}" -c "${command[0]} ${command_quoted[@]:1};exec ${SHELL:-sh}"
                ;;
                010)
                        terminal.sh -e "${SHELL:-sh}" -c "${command[0]} ${command_quoted[@]:1}"
                ;;
                001)
                        exec ${SHELL:-sh} -c "${command[0]} ${command_quoted[@]:1};builtin printf '%s\n' 'Press ENTER to continue';builtin read"
                ;;
                000)
                        exec -a "${command[0]}" "${command[@]}"
                esac
        else
                case ${flag_f}${flag_n}${flag_k} in
                111)
                        exec daemonize.sh terminal.sh -e "${SHELL:-sh}" -c "${command[0]} ${command_quoted[@]:1};exec ${SHELL:-sh}"
                ;;
                110)
                        exec daemonize.sh terminal.sh -e "${SHELL:-sh}" -c "${command[0]} ${command_quoted[@]:1}"
                ;;
                #101)
                #;;
                100)
                        exec setsid.sh "${command[0]}" "${command[@]}"
                ;;
                011)
                        exec daemonize.sh terminal.sh -e "${SHELL:-sh}" -c "${command[0]} ${command_quoted[@]:1};exec ${SHELL:-sh}"
                ;;
                010)
                        exec daemonize.sh terminal.sh -e "${SHELL:-sh}" -c "${command[0]} ${command_quoted[@]:1}"
                ;;
                001)
                        exec daemonize.sh ${SHELL:-sh} -c "${command[0]} ${command_quoted[@]:1};builtin printf '%s\n' 'Press ENTER to continue';builtin read"
                ;;
                000)
                        exec setsid.sh "${command[0]}" "${command[@]}"
                esac
        fi
else
        printf "Command not found: '%s'\n" "${command[0]}" \
        1>&2;
        exit 1
fi

Open::ReplacePattern ()
{
        typeset \
                a \
                q;

        printf -v q '%q' "$1"
        for a in "${!command[@]}"
        do
                command_quoted[$a]=${command[$a]//[%]s/$q}
                command[$a]=${command[$a]//[%]s/$1}
        done
}


# -- MAIN.

OPTIND=1
OPTERR=1
use_x=

typeset -i \
        flag_f= \
        flag_k= \
        flag_n= \
        flag_x=;

typeset -a \
        command \
        command_quoted;

while
        getopts :fknx opt
do
        case $opt in
        f)
                flag_f=1
        ;;
        k)
                flag_k=1
        ;;
        n)
                flag_n=1
        ;;
        x)
                flag_x=1
                use_x=x-
        ;;
        \?)
                printf "Unknown flag: '-%s'\n" "$OPTARG" \
                1>&2;
                exit 1
        esac
done
shift $(( OPTIND - 1 ))

[[ ${BASH_SOURCE[0]##*/} == x-open.sh ]] && use_x=x-;

source <(Open::Init)

for a
do
        if
                [[ -d $a ]]
        then
                command=( ${Ext[-]} )
        elif
                [[ -e $a ]]
        then
                Open::CheckMime "$a" || Open::CheckExt "${a,,}";
        else
                Open::CheckString "$a"
        fi
        Open::ReplacePattern "$a"
        Open::ExecCommand
done

# vim: set ts=8 sw=8 tw=0 et :
