#!/usr/bin/env bash
#
# Simple replacement for urlview using fzf in X.
#
# Usage:
#
# $ furlview FILE1 ... FILEn
# $ foo | furlview
# $ furlview < FILE
# $ furlview <<< "foo"
# $ furlview <<URIS
## foo
## URIS
#
# FILE is regular or piped, that is also <(foo)

__x_web_browser () { setsidw x-web-browser "$1"; }

__fzf () { fzf --tac -e -i -m; }

__ugrep ()
{
        #grep -P -e '(((http|https|ftp|gopher)|mailto):(//)?[^ >"\t]*|www\.[-a-z0-9.]+)[^ .,;\t>">\):]';
        # ((http|https|gopher|ftp|ftps|webdav|webdavs|dav|davs):(//)?[^ <>"\t]*|(www|ftp)[0-9]?\.[-a-z0-9.]+)[^ .,;\t\n\r<">\):]?[^, <>"\t]*[^ .,;\t\n\r<">\):]
        # (((http|https|ftp|gopher)|mailto):(//)?[^ >"\t]*|www\.[-a-z0-9.]+)[^ .,;\t>">\):]
        # (((http|https|ftp|gopher)|mailto)[.:][^ >"\t]*|www\.[-a-z0-9.]+)[^ .,;\t>">\):]

        urlscan -n
}

__select () { __ugrep | __fzf; }

__is_file () [[ -p $1 || -f $1 ]]

if
        __is_file "/dev/stdin"
then
        mapfile -t furls < <(__select);
else
        if
                ! (($#))
        then
                printf '%s\n' "aaarg?" 1>&2;
                exit 1
        fi
        mapfile -t furls < <(
                for a
                do
                        if
                                __is_file "$a"
                        then
                                cat "$a"
                        else
                                printf 'File %s is neather a regular file nor a named pipe, that is executable' "$a" 1>&2;
                                exit 1
                        fi
                done \
                | __select;
        );
fi

if
        ((${#furls[@]}))
then
        case "$DISPLAY" in
        "")
                false
        ;;
        *)
                for u in "${furls[@]}"
                do
                        __x_web_browser "$u" &
                done
        esac
        wait
fi

# vim: set ts=8 sw=8 tw=0 et :
