#!/usr/bin/env bash
#
# Some functions to modify public user-playlists via Spotify's Web API.
# needs: bash, curl, gawk and jq

# -- FUNCTIONS.

# -- web api.

function spotify.albums.getSeveralAlbums {
    # OAuth Scope: null
    # Params: access_token

    [[ -n $2 ]] ||
        return 1;

    curl \
        -s \
        -X GET "https://api.spotify.com/v1/albums/?ids=${@:2}" \
        -H "Authorization: Bearer ${1:?}";
};

function spotify.playlist.addTracks {
    # OAuth Scope: playlist-modify-public, playlist-modify-private
    # Params: user_id playlist_id access_token spotify_uri ...

    [[ -n $4 ]] ||
        return 1;

    curl \
        -s \
        -X POST "https://api.spotify.com/v1/users/${1:?}/playlists/${2:?}/tracks" \
        -H "Authorization: Bearer ${3:?}" \
        -H "Accept: application/json" \
        -H "Content-Type: application/json" \
        --data "${@:4}";
};

function spotify.playlist.clear {
    # OAuth Scope: playlist-modify-public, playlist-modify-private
    # Params: user_id playlist_id access_token

    curl \
        -s \
        -X PUT "https://api.spotify.com/v1/users/${1:?}/playlists/${2:?}/tracks?uris=" \
        -H "Authorization: Bearer ${3:?}";
};

function spotify.playlist.create {
    # OAuth Scope: playlist-modify-public, playlist-modify-private
    # Params: user_id playlist_name access_token

    curl \
        -s \
        -X POST "https://api.spotify.com/v1/users/${1:?}/playlists" \
        -H "Authorization: Bearer ${3:?}" \
        -H "Content-Type: application/json" \
        --data "{\"name\":\"${2:?}\", \"public\":true, \"collaborative\":false}";
};

function spotify.playlist.getTracks {
    # OAuth Scope: null
    # Params: user_id playlist_id access_token [offset]

    curl \
        -s \
        -X GET "https://api.spotify.com/v1/users/${1:?}/playlists/${2:?}/tracks?limit=100&offset=${4:-0}" \
        -H "Authorization: Bearer ${3:?}";
};

function spotify.playlist.list {
    # OAuth Scope: playlist-read-private, playlist-read-collaborative
    # Params: user_id access_token [offset]

    curl \
        -s \
        -X GET "https://api.spotify.com/v1/users/${1:?}/playlists?limit=50&offset=${3:-0}" \
        -H "Authorization: Bearer ${2:?}";
};

function spotify.playlist.privatize {
    # OAuth Scope: playlist-modify-public, playlist-modify-private
    # Params: user_id playlist_id access_token
    curl \
        -s \
        -X PUT "https://api.spotify.com/v1/users/${1:?}/playlists/${2:?}" \
        -H "Authorization: Bearer ${3:?}" \
        -H "Content-Type: application/json" \
        --data "{\"public\":false}";
};

function spotify.tracks.audio_features {
    # OAuth Scope:
    # Params: access_token ids

    [[ -n $2 ]] ||
        return 1;

    curl \
        -s \
        -X GET "https://api.spotify.com/v1/audio-features/?ids=${@:2}" \
        -H "Accept: application/json" \
        -H "Authorization: Bearer ${1:?}";
};

# -- misc.

function addTracks {
    declare uid=${1:?} plid=${2:?} ato=${3:?};
    declare -a uris=();

    shift 3

    if
        [[ -p /dev/stdin || -f /dev/stdin ]];
    then
        mapfile -t uris;
    else
        (($#)) &&
            mapfile -t uris < <(cat "$@");
    fi;

    ((${#uris[@]})) ||
        return 1;

    declare -i \
        int=${#uris[@]}/100 \
        mod=${#uris[@]}%100 \
        i= \
        x=0 \
        y=100;

    for ((i=int; i > 0; i--, x+=100)); do
        spotify.playlist.addTracks "$uid" "$plid" "$ato" "$(
            printf %s\\n "${uris[@]:x:y}" |
            jq -R . |
            jq -sc '{ uris: . }';
        )";
    done;

    ((mod)) &&
        spotify.playlist.addTracks "$uid" "$plid" "$ato" "$(
            printf '%s\n' "${uris[@]: -mod}" |
            jq -R . |
            jq -sc '{ uris: . }';
        )";
};

function getLists {
    declare -i offset=-50;

    jq -e -r --unbuffered '
        if (.items | length) > 0
        then .items[] | [.id, .name] | @sh "spotify_playlists+=(\(.))"
        else "exit"
        end
    ' < <(
        while
            'spotify.playlist.list' \
                "${1:?}" \
                "${2:?}" \
                "$((offset+=50))";
        do
            :;
        done;
    ) |
    gawk '$0 == "exit" { exit }; { print $0; };'
};

function getAlbums {
    declare -i offset=-100;

    jq -e -r --unbuffered '
        if (.items | length) > 0
        then .items[] | [.track.album.uri, .track.uri] | @tsv
        else "exit"
        end
    ' < <(
        while
            'spotify.playlist.getTracks' \
                "${1:?}" \
                "${2:?}" \
                "${3:?}" \
                "$((offset+=100))";
        do
            :;
        done;
    ) |
    gawk '$0 == "exit" { exit }; { print $0; };'
};

function getAlbumsObjects {
    declare ato=${1:?};
    declare -a uris=();

    shift 1

    if
        [[ -p /dev/stdin || -f /dev/stdin ]];
    then
        mapfile -t uris;
    else
        (($#)) &&
            mapfile -t uris < <(cat "$@");
    fi;

    ((${#uris[@]})) ||
        return 1;

    declare -i \
        int=${#uris[@]}/20 \
        mod=${#uris[@]}%20 \
        i= \
        x=0 \
        y=20;

    IFS=,;
    for ((i=int; i > 0; i--, x+=20)); do
        spotify.albums.getSeveralAlbums "$ato" "${uris[*]:x:y}";
    done;

    ((mod)) &&
        spotify.albums.getSeveralAlbums "$ato" "${uris[*]: -mod}";
};

function getTracks {
    declare -i offset=-100;

    jq -e -r --unbuffered '
        if (.items | length) > 0
        then .items[].track.uri
        else "exit"
        end
    ' < <(
        while
            'spotify.playlist.getTracks' \
                "${1:?}" \
                "${2:?}" \
                "${3:?}" \
                "$((offset+=100))";
        do
            :;
        done;
    ) |
    gawk '$0 == "exit" { exit }; { print $0; };'
};

function getTracksFeatures {
    declare ato=${1:?};
    declare -a uris=();

    shift 1

    if
        [[ -p /dev/stdin || -f /dev/stdin ]];
    then
        mapfile -t uris;
    else
        (($#)) &&
            mapfile -t uris < <(cat "$@");
    fi;

    ((${#uris[@]})) ||
        return 1;

    declare -i \
        int=${#uris[@]}/100 \
        mod=${#uris[@]}%100 \
        i= \
        x=0 \
        y=100;

    IFS=,;
    for ((i=int; i > 0; i--, x+=100)); do
        spotify.tracks.audio_features "$ato" "${uris[*]:x:y}";
    done;

    ((mod)) &&
        spotify.tracks.audio_features "$ato" "${uris[*]: -mod}";
};

# -- MAIN.

case ${1:?} in
    (addList)
        spotify.playlist.create "${@:2}";;
    (addTracks)
        addTracks "${@:2}";;
    (clearList)
        spotify.playlist.clear "${@:2}";;
    (getLists)
        getLists "${@:2}";;
    (getAlbums)
        getAlbums "${@:2}";;
    (getAlbumsObjects)
        getAlbumsObjects "${@:2}";;
    (getTracks)
        getTracks "${@:2}";;
    (getTracksFeatures)
        getTracksFeatures "${@:2}";;
    (privatizeList)
        spotify.playlist.privatize "${@:2}";;
esac;

# vim: set ft=sh :
